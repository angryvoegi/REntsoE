})
rlst <- convert_xml(resp)
datas <- rlst
locs <- get_Locations(rawdat = datas, eicLoc = REntsoE::eicLoc)
expect_equal(locs[1], "EPLE")
expect_length(locs, 29)
})
rcmdcheck::rcmdcheck("C:\\Users\\nicco\\Desktop\\HSLU\\Masterarbeit\\Package\\REntsoE")
library(testthat)
library(vcr)
test_that("Correct location from mRID", {
vcr::use_cassette("pull_dataA71", {
url <- build_url(
documentType = "A71", processType = "A33",
in_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
})
rlst <- convert_xml(resp)
datas <- rlst
locs <- get_Locations(rawdat = datas, eicLoc = REntsoE::eicLoc)
expect_equal(locs[1], "EPLE")
expect_length(locs, 29)
})
test_that("Location gets appended to the data", {
vcr::use_cassette("pull_dataA71", {
url <- build_url(
documentType = "A71", processType = "A33",
in_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
rlst <- convert_xml(resp)
})
datas <- rlst
onlyTS <- only_ts(datas)
dates <- date_from_lst(onlyTS)
values <- values_from_lst(onlyTS)
final <- data.frame(Date = do.call("c", dates), Val = unlist(values))
colnames(final) <- dynamic_colnames(
df = final, rawdat = datas,
onlyTS_dat = onlyTS,
codeList = codeList
)
final <- append_location(final, rawdat = datas)
expect_equal(ncol(final), 3)
expect_equal(final[1, 3], "EPLE")
})
vcr::use_cassette("pull_dataA6516", {
url <- build_url(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
rlst <- convert_xml(resp)
})
vcr::use_cassette("tests\\fixtures\\pull_dataA6516", {
url <- build_url(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
rlst <- convert_xml(resp)
})
vcr::use_cassette("pull_dataA6516", {
url <- build_url(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
rlst <- convert_xml(resp)
})
library("vcr") # *Required* as vcr is set up on loading
invisible(vcr::vcr_configure(
dir = "../fixtures"
))
vcr::check_cassette_names()
test_that("Response is only ts", {
vcr::use_cassette("pull_dataA6516", {
url <- build_url(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
rlst <- convert_xml(resp)
})
datas <- rlst
test <- only_ts(datas)
expect_true(names(test) == "TimeSeries")
})
vcr::use_cassette("pull_dataA6516", {
url <- build_url(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
rlst <- convert_xml(resp)
})
library("vcr") # *Required* as vcr is set up on loading
invisible(vcr::vcr_configure(
dir = "..REntsoE/tests/fixtures"
))
vcr::check_cassette_names()
vcr::use_cassette("pull_dataA6516", {
url <- build_url(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
rlst <- convert_xml(resp)
})
vcr::vcr_configure()
getwd()
library("vcr") # *Required* as vcr is set up on loading
invisible(vcr::vcr_configure(
dir = "../tests/fixtures"
))
vcr::check_cassette_names()
vcr::use_cassette("pull_dataA6516", {
url <- build_url(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
rlst <- convert_xml(resp)
})
library("vcr") # *Required* as vcr is set up on loading
invisible(vcr::vcr_configure(
dir = "../REntsoE/tests/fixtures"
))
vcr::check_cassette_names()
vcr::use_cassette("pull_dataA6516", {
url <- build_url(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
rlst <- convert_xml(resp)
})
rcmdcheck::rcmdcheck("C:\\Users\\nicco\\Desktop\\HSLU\\Masterarbeit\\REntsoE")
library(testthat)
library(vcr)
test_that("Correct location from mRID", {
vcr::use_cassette("pull_dataA71", {
url <- build_url(
documentType = "A71", processType = "A33",
in_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
})
rlst <- convert_xml(resp)
datas <- rlst
locs <- get_Locations(rawdat = datas, eicLoc = REntsoE::eicLoc)
expect_equal(locs[1], "EPLE")
expect_length(locs, 29)
})
test_that("Location gets appended to the data", {
vcr::use_cassette("pull_dataA71", {
url <- build_url(
documentType = "A71", processType = "A33",
in_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
rlst <- convert_xml(resp)
})
datas <- rlst
onlyTS <- only_ts(datas)
dates <- date_from_lst(onlyTS)
values <- values_from_lst(onlyTS)
final <- data.frame(Date = do.call("c", dates), Val = unlist(values))
colnames(final) <- dynamic_colnames(
df = final, rawdat = datas,
onlyTS_dat = onlyTS,
codeList = codeList
)
final <- append_location(final, rawdat = datas)
expect_equal(ncol(final), 3)
expect_equal(final[1, 3], "EPLE")
})
library(testthat)
library(vcr)
test_that("Response is only ts", {
vcr::use_cassette("pull_dataA6516", {
url <- build_url(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
rlst <- convert_xml(resp)
})
datas <- rlst
test <- only_ts(datas)
expect_true(names(test) == "TimeSeries")
})
vcr::use_cassette("pull_dataA6516", {
url <- build_url(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
rlst <- convert_xml(resp)
})
vcr::use_cassette("pull_dataA6516", {
url <- build_url(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
rlst <- convert_xml(resp)
})
vcr::use_cassette("pull_dataA6516", {
url <- build_url(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
})
vcr::vcr_last_error()
url <- build_url(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
resp
vcr::use_cassette("pull_dataA6516", {
url <- build_url(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
})
test_that("Response is only ts", {
vcr::use_cassette("pull_dataA6516", {
url <- build_url(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
})
rlst <- convert_xml(resp)
datas <- rlst
test <- only_ts(datas)
expect_true(names(test) == "TimeSeries")
})
test_that("Date is generated correctly", {
dates <- points_to_time(start = "2019-12-31T23:00Z",
n_points = 2,
period = "P1D")
expect_length(dates, 2)
expect_equal(as.POSIXct(dates[1]), as.POSIXct("2020-01-01 23:00:00 UTC", tz = "UTC"))
})
test_that("Dates generated from response", {
vcr::use_cassette("pull_dataA6516", {
url <- build_url(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
rlst <- convert_xml(resp)
})
datas <- rlst
test <- only_ts(datas)
dates <- date_from_lst(test)
expect_length(dates$TimeSeries, 8784)
expect_equal(as.POSIXct(dates$TimeSeries[1]), as.POSIXct("2020-01-01 00:00:00 UTC", tz = "UTC"))
})
vcr::use_cassette("pull_dataA69", {
url <- build_url(
documentType = "A69", processType = "A18",
in_Domain = "10YFI-1--------U",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
rlst <- convert_xml(resp)
})
test_that("PSR type is correctly mapped", {
vcr::use_cassette("pull_dataA69", {
url <- build_url(
documentType = "A69", processType = "A18",
in_Domain = "10YFI-1--------U",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
})
rlst <- convert_xml(resp)
datas <- rlst
psrType <- type_from_list(
rlst = datas,
psrtype = codeList$AssetTypeList
)
expect_equal(unique(psrType)[1], "Solar")
expect_equal(unique(psrType)[2], "Wind Onshore")
expect_length(psrType, 17616)
})
test_that("Parameters from response are correct", {
vcr::use_cassette("pull_dataA69", {
url <- build_url(
documentType = "A69", processType = "A18",
in_Domain = "10YFI-1--------U",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
rlst <- convert_xml(resp)
})
datas <- rlst
prms <- get_params(datas)
expect_length(prms, 6)
expect_equal(prms[[1]], "A69")
expect_equal(prms[[2]], "A18")
expect_equal(prms[[3]], "A94")
expect_equal(prms[[4]], "A08")
expect_equal(prms[[5]], "MAW")
expect_equal(prms[[6]], "A01")
})
library(testthat)
library(vcr)
test_that("API key must be character",{
key <- 123
Sys.setenv("ENTSOE_KEY" = "")
expect_error(REntsoE::set_apikey(key))
})
test_that("API key not set", {
Sys.setenv("ENTSOE_KEY" = "")
expect_error(build_url())
})
vcr::use_cassette("pull_dataA6501", {
url <- build_url(
documentType = "A65", processType = "A01",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
})
vcr::use_cassette("pull_dataA6501", {
url <- build_url(
documentType = "A65", processType = "A01",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
})
url <- build_url(
documentType = "A65", processType = "A01",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
REntsoE::set_apikey("0b6f37a7-d11b-420a-8d44-bcb1136dd5e0")
test_that("Check if data frame is pivoted correctly", {
vcr::use_cassette("pull_dataA6501", {
url <- build_url(
documentType = "A65", processType = "A01",
outBiddingZone_Domain = "10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300")
resp <- httr::GET(url)
})
rlst <- convert_xml(resp)
datas <- rlst
onlyTS <- only_ts(datas)
dates <- date_from_lst(onlyTS)
values <- values_from_lst(onlyTS)
final <- data.frame(Date = do.call("c", dates), Val = unlist(values))
test <- split_columns(df = final, rawdat = datas)
expect_equal(ncol(test), 2)
expect_equal(colnames(test), c("Date", "Val"))
})
library(testthat)
library(vcr)
test_that("URL is built correctly", {
documentType = "A65"
processType = "A16"
outBiddingZone_Domain = "10YCZ-CEPS-----N"
periodStart = "201512312300"
periodEnd = "201612312300"
url <- build_url(documentType = documentType,
processType = processType,
outBiddingZone_Domain = outBiddingZone_Domain,
periodStart = periodStart,
periodEnd = periodEnd, key = FALSE)
expect_equal(url,
"documentType=A65&outBiddingZone_Domain=10YCZ-CEPS-----N&periodEnd=201612312300&periodStart=201512312300&processType=A16")
})
test_that("URL security token missing", {
documentType = "A65"
processType = "A16"
outBiddingZone_Domain = "10YCZ-CEPS-----N"
periodStart = "201512312300"
periodEnd = "201612312300"
expect_error(build_url(documentType = documentType,
processType = processType,
outBiddingZone_Domain = outBiddingZone_Domain,
periodStart = periodStart,
periodEnd = periodEnd))
})
test_that("URL security token missing", {
documentType = "A65"
processType = "A16"
outBiddingZone_Domain = "10YCZ-CEPS-----N"
periodStart = "201512312300"
periodEnd = "201612312300"
expect_error(build_url(documentType = documentType,
processType = processType,
outBiddingZone_Domain = outBiddingZone_Domain,
periodStart = periodStart,
periodEnd = periodEnd))
})
documentType = "A65"
processType = "A16"
outBiddingZone_Domain = "10YCZ-CEPS-----N"
periodStart = "201512312300"
periodEnd = "201612312300"
build_url(documentType = documentType,
processType = processType,
outBiddingZone_Domain = outBiddingZone_Domain,
periodStart = periodStart,
periodEnd = periodEnd)
Sys.setenv("ENTSOE_KEY" = "")
documentType = "A65"
processType = "A16"
outBiddingZone_Domain = "10YCZ-CEPS-----N"
periodStart = "201512312300"
periodEnd = "201612312300"
expect_error(build_url(documentType = documentType,
processType = processType,
outBiddingZone_Domain = outBiddingZone_Domain,
periodStart = periodStart,
periodEnd = periodEnd))
test_that("URL security token missing", {
Sys.setenv("ENTSOE_KEY" = "")
documentType = "A65"
processType = "A16"
outBiddingZone_Domain = "10YCZ-CEPS-----N"
periodStart = "201512312300"
periodEnd = "201612312300"
expect_error(build_url(documentType = documentType,
processType = processType,
outBiddingZone_Domain = outBiddingZone_Domain,
periodStart = periodStart,
periodEnd = periodEnd))
})
library(testthat)
library(vcr)
test_that("API returns response",{
url <- "https://web-api.tp.entsoe.eu/api?documentType=A65&processType=A16&outBiddingZone_Domain=10YCZ-CEPS-----N&periodStart=201512302300&periodEnd=201512312300"
resp <- httr::GET(paste(url, "&securityToken=", Sys.getenv("ENTSOE_KEY"), sep = ""))
expect_output(api_error(resp), "Good request.")
})
REntsoE::set_apikey("0b6f37a7-d11b-420a-8d44-bcb1136dd5e0")
test_that("API returns response",{
url <- "https://web-api.tp.entsoe.eu/api?documentType=A65&processType=A16&outBiddingZone_Domain=10YCZ-CEPS-----N&periodStart=201512302300&periodEnd=201512312300"
resp <- httr::GET(paste(url, "&securityToken=", Sys.getenv("ENTSOE_KEY"), sep = ""))
expect_output(api_error(resp), "Good request.")
})
test_that("API unavailable",{
url <- "https://web-api.tp.entsoe.eu/api?documentType=A65&processType=A16&periodStart=201512302300&periodEnd=201512312300"
resp <- httr::GET(paste(url, "&securityToken=", Sys.getenv("ENTSOE_KEY"), sep = ""))
expect_output(api_error(resp), "Bad request.")
})
test_that("API returns response",{
vcr::use_cassette("apiReturn", {
url <- "https://web-api.tp.entsoe.eu/api?documentType=A65&processType=A16&outBiddingZone_Domain=10YCZ-CEPS-----N&periodStart=201512302300&periodEnd=201512312300"
resp <- httr::GET(paste(url, "&securityToken=", Sys.getenv("ENTSOE_KEY"), sep = ""))
})
expect_output(api_error(resp), "Good request.")
})
})
expect_output(api_error(resp), "Bad request.")
test_that("API unavailable",{
vcr::use_cassette("apiReturn", {
url <- "https://web-api.tp.entsoe.eu/api?documentType=A65&processType=A16&periodStart=201512302300&periodEnd=201512312300"
resp <- httr::GET(paste(url, "&securityToken=", Sys.getenv("ENTSOE_KEY"), sep = ""))
})
expect_output(api_error(resp), "Bad request.")
})
vcr::use_cassette("apiReturn", {
url <- "https://web-api.tp.entsoe.eu/api?documentType=A65&processType=A16&periodStart=201512302300&periodEnd=201512312300"
resp <- httr::GET(paste(url, "&securityToken=", Sys.getenv("ENTSOE_KEY"), sep = ""))
})
vcr::use_cassette("apiReturn2", {
url <- "https://web-api.tp.entsoe.eu/api?documentType=A65&processType=A16&periodStart=201512302300&periodEnd=201512312300"
resp <- httr::GET(paste(url, "&securityToken=", Sys.getenv("ENTSOE_KEY"), sep = ""))
})
expect_output(api_error(resp), "Bad request.")
test_that("API unavailable",{
vcr::use_cassette("apiReturn2", {
url <- "https://web-api.tp.entsoe.eu/api?documentType=A65&processType=A16&periodStart=201512302300&periodEnd=201512312300"
resp <- httr::GET(paste(url, "&securityToken=", Sys.getenv("ENTSOE_KEY"), sep = ""))
})
expect_output(api_error(resp), "Bad request.")
})
library(testthat)
library(vcr)
test_that("API returns response",{
vcr::use_cassette("apiReturn", {
url <- "https://web-api.tp.entsoe.eu/api?documentType=A65&processType=A16&outBiddingZone_Domain=10YCZ-CEPS-----N&periodStart=201512302300&periodEnd=201512312300"
resp <- httr::GET(paste(url, "&securityToken=", Sys.getenv("ENTSOE_KEY"), sep = ""))
})
expect_output(api_error(resp), "Good request.")
})
test_that("API unavailable",{
vcr::use_cassette("apiReturn2", {
url <- "https://web-api.tp.entsoe.eu/api?documentType=A65&processType=A16&periodStart=201512302300&periodEnd=201512312300"
resp <- httr::GET(paste(url, "&securityToken=", Sys.getenv("ENTSOE_KEY"), sep = ""))
})
expect_output(api_error(resp), "Bad request.")
})
yaml::read_yaml("C:\\Users\\nicco\\Desktop\\HSLU\\Masterarbeit\\Package\\REntsoE\\tests\\fixtures\\apiReturn.yml")
use_cassette
insert_cassette
url <- "https://web-api.tp.entsoe.eu/api?documentType=A65&processType=A16&outBiddingZone_Domain=10YCZ-CEPS-----N&periodStart=201512302300&periodEnd=201512312300"
resp <- httr::GET(paste(url, "&securityToken=", Sys.getenv("ENTSOE_KEY"), sep = ""))
xmlInternalTreeParse(content(resp,type="text"))
XML::xmlInternalTreeParse(content(resp,type="text"))
write_xml(resp, file="temp.html")
XML::xmlInternalTreeParse(content(resp,type="text"))
XML::xmlInternalTreeParse(content(resp, type="text"))
convert_xml(xml = "C:\\Users\\nicco\\Desktop\\TESTS\\neu 2.xml")
httr::GET(paste(url, "&securityToken=", Sys.getenv("ENTSOE_KEY"), sep = ""))
convert_xml(xml = "C:\\Users\\nicco\\Desktop\\TESTS\\neu 2.xml")
write_disk

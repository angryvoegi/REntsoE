View(oneYearCH)
lubridate::hour(oneYearCH$Date)
oneYearCH$hour <- lubridate::hour(oneYearCH$Date)
oneYearCH$wday <- lubridate::wday(oneYearCH$Date)
ggplot(oneYearCH, aes(hour, wday)) + geom_tile(aes(fill = N),colour = "white", na.rm = TRUE) +
scale_fill_gradient(low = "yellow", high = "red") +
guides(fill=guide_legend(title="Total Incidents")) +
theme_bw() + theme_minimal() +
labs(title = "Histogram of Seattle Incidents by Day of Week and Hour",
x = "Incidents Per Hour", y = "Day of Week") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
head(oneYearCH)
ggplot(oneYearCH, aes(hour, wday)) + geom_tile(aes(fill = `Realised Consumption`),colour = "white", na.rm = TRUE) +
scale_fill_gradient(low = "yellow", high = "red")
ggplot(oneYearCH, aes(hour, wday)) + geom_tile(aes(fill = `Realised Consumption`),colour = "white", na.rm = TRUE) +
scale_fill_gradient(low = "green", high = "red")
oneYearCH$wday <- lubridate::wday(oneYearCH$Date, label = T)
ggplot(oneYearCH, aes(hour, wday)) + geom_tile(aes(fill = `Realised Consumption`),colour = "white", na.rm = TRUE) +
scale_fill_gradient(low = "green", high = "red") +
guides(fill=guide_legend(title="Total Incidents")) +
theme_bw() + theme_minimal() +
labs(title = "Histogram of Seattle Incidents by Day of Week and Hour",
x = "Incidents Per Hour", y = "Day of Week") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(oneYearCH, aes(hour, wday)) + geom_tile(aes(fill = `Realised Consumption`),colour = "white", na.rm = TRUE) +
scale_fill_gradient(low = "blue", high = "red") +
guides(fill=guide_legend(title="Total Incidents")) +
theme_bw() + theme_minimal() +
labs(title = "Histogram of Seattle Incidents by Day of Week and Hour",
x = "Incidents Per Hour", y = "Day of Week") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(oneYearCH, aes(hour, wday)) + geom_tile(aes(fill = `Realised Consumption`),colour = "white", na.rm = TRUE) +
scale_fill_gradient(low = "#d8e1cf", high = "#438484") +
guides(fill=guide_legend(title="Total Incidents")) +
theme_bw() + theme_minimal() +
labs(title = "Histogram of Seattle Incidents by Day of Week and Hour",
x = "Incidents Per Hour", y = "Day of Week") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(oneYearCH, aes(hour, wday)) + geom_tile(aes(fill = `Realised Consumption`),colour = "white", na.rm = TRUE) +
scale_fill_gradient(low = "#87f", high = "#438484") +
guides(fill=guide_legend(title="Total Incidents")) +
theme_bw() + theme_minimal() +
labs(title = "Histogram of Seattle Incidents by Day of Week and Hour",
x = "Incidents Per Hour", y = "Day of Week") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(oneYearCH, aes(hour, wday)) + geom_tile(aes(fill = `Realised Consumption`),colour = "white", na.rm = TRUE) +
scale_fill_gradient(low = "#87f45d", high = "#438484") +
guides(fill=guide_legend(title="Total Incidents")) +
theme_bw() + theme_minimal() +
labs(title = "Histogram of Seattle Incidents by Day of Week and Hour",
x = "Incidents Per Hour", y = "Day of Week") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(oneYearCH, aes(hour, wday)) + geom_tile(aes(fill = `Realised Consumption`),colour = "white", na.rm = TRUE) +
scale_fill_gradient(low = "#87f45d", high = "#438484") +
guides(fill = guide_legend(title = "Realised Consumption")) +
theme_bw() + theme_minimal() +
labs(title = "Heatmap of realised consumption over one year per hour",
x = "Hour", y = "Day of Week") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(oneYearCH, aes(hour, wday)) + geom_tile(aes(fill = `Realised Consumption`),colour = "white", na.rm = TRUE) +
scale_fill_gradient(low = "lightblue", high = "red") +
guides(fill = guide_legend(title = "Realised Consumption")) +
theme_bw() + theme_minimal() +
labs(title = "Heatmap of realised consumption over one year per hour",
x = "Hour", y = "Day of Week") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
### Boxplot des Stromverbrauchs pro Woche für ein Jahr (2022) CH ####
oneYearCH <- pull_data(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCH-SWISSGRIDZ",
periodStart = "202112312300", periodEnd = "202212312300"
)
oneYearCH$week <- lubridate::week(oneYearCH$Date)
View(oneYearCH)
ggplot(oneYearCH, aes(week, Value)) +
geom_boxplot()
ggplot(oneYearCH, aes(week, `Realised Consumption`)) +
geom_boxplot()
oneYearCH$week <- as.factor(lubridate::week(oneYearCH$Date))
ggplot(oneYearCH, aes(week, `Realised Consumption`)) +
geom_boxplot()
ggplot(oneYearCH, aes(week, `Realised Consumption`)) +
geom_boxplot() +
theme_bw()
ggplot(oneYearCH, aes(hour, wday)) + geom_tile(aes(fill = `Realised Consumption`),colour = "white", na.rm = TRUE) +
scale_fill_gradient(low = "lightblue", high = "red") +
guides(fill = guide_legend(title = "Realised Consumption")) +
theme_bw() +
labs(title = "Heatmap of realised consumption over one year per hour",
x = "Hour", y = "Day of Week") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
oneYearCH$hour <- lubridate::hour(oneYearCH$Date)
oneYearCH$wday <- lubridate::wday(oneYearCH$Date, label = T)
ggplot(oneYearCH, aes(hour, wday)) + geom_tile(aes(fill = `Realised Consumption`),colour = "white", na.rm = TRUE) +
scale_fill_gradient(low = "lightblue", high = "red") +
guides(fill = guide_legend(title = "Realised Consumption")) +
theme_bw() +
labs(title = "Heatmap of realised consumption over one year per hour",
x = "Hour", y = "Day of Week") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(oneYearCH, aes(hour, wday)) + geom_tile(aes(fill = `Realised Consumption`),colour = "white", na.rm = TRUE) +
# scale_fill_gradient(low = "lightblue", high = "red") +
guides(fill = guide_legend(title = "Realised Consumption")) +
theme_bw() +
labs(title = "Heatmap of realised consumption over one year per hour",
x = "Hour", y = "Day of Week") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(oneYearCH, aes(hour, wday)) + geom_tile(aes(fill = `Realised Consumption`),colour = "white", na.rm = TRUE) +
scale_fill_gradient(low = "lightblue", high = "red") +
guides(fill = guide_legend(title = "Realised Consumption")) +
theme_bw() +
labs(title = "Heatmap of realised consumption over one year per hour",
x = "Hour", y = "Day of Week") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(oneYearCH, aes(week, `Realised Consumption`)) +
geom_boxplot() +
theme_bw()
ggplot(oneYearCH, aes(week, `Realised Consumption`)) +
geom_boxplot() +
theme_bw() +
ggtitle("Boxplot of the realised consumption per week for the year 2022")
oneYearCH$Week <- as.factor(lubridate::week(oneYearCH$Date))
ggplot(oneYearCH, aes(Week, `Realised Consumption`)) +
geom_boxplot() +
theme_bw() +
ggtitle("Boxplot of the realised consumption per week for the year 2022")
### Boxplot des Stromverbrauchs pro Woche für mehrere Jahre  CH ####
start_date <- c("201512312300", "201612312300", "201712312300", "201812312300",
"201912312300", "202012312300", "202112312300")
end_date <- c("201612312300", "201712312300", "201812312300", "201912312300",
"202012312300", "202112312300", "202212312300")
dat <- list()
for(i in 1:length(start_date)){
print(paste(i, " von ", length(start_date), sep = ""))
dat[[i]] <- pull_data(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCH-SWISSGRIDZ",
periodStart = start_date[i], periodEnd = end_date[i]
)
}
fin <- do.call(rbind, dat)
fin$Week <- as.factor(lubridate::week(oneYearCH$Date))
fin$Week <- as.factor(lubridate::week(fin$Date))
ggplot(oneYearCH, aes(Week, `Realised Consumption`)) +
geom_boxplot() +
theme_bw() +
ggtitle("Boxplot of the realised consumption per week for the year 2022")
ggplot(fin, aes(Week, `Realised Consumption`)) +
geom_boxplot() +
theme_bw() +
ggtitle("Boxplot of the realised consumption per week for the year 2022")
ggplot(fin, aes(Week, `Realised Consumption`)) +
geom_boxplot() +
theme_bw() +
ggtitle("Boxplot of the realised consumption per week for the years 2016 - 2022")
fin$Year <- as.factor(lubridate::year(fin$Date))
ggplot(fin, aes(Week, `Realised Consumption`)) +
geom_boxplot() +
theme_bw() +
facet_wrap(~Year) +
ggtitle("Boxplot of the realised consumption per week for the years 2016 - 2022")
library(REntsoE)
library(ggplot2)
library(dplyr)
REntsoE::set_apikey("0b6f37a7-d11b-420a-8d44-bcb1136dd5e0")
start_date <- c("201512312300", "201612312300", "201712312300", "201812312300",
"201912312300", "202012312300", "202112312300")
end_date <- c("201612312300", "201712312300", "201812312300", "201912312300",
"202012312300", "202112312300", "202212312300")
dat <- list()
for(i in 1:length(start_date)){
print(paste(i, " von ", length(start_date), sep = ""))
dat[[i]] <- pull_data(
documentType = "A65", processType = "A16",
outBiddingZone_Domain = "10YCH-SWISSGRIDZ",
periodStart = start_date[i], periodEnd = end_date[i]
)
}
fin <- do.call(rbind, dat)
fin$Week <- as.factor(lubridate::week(fin$Date))
fin$Year <- as.factor(lubridate::year(fin$Date))
ggplot(fin, aes(Week, `Realised Consumption`)) +
geom_boxplot() +
theme_bw() +
ggtitle("Boxplot of the realised consumption per week for the years 2016 - 2022")
ggplot(fin, aes(Week, `Realised Consumption`)) +
geom_boxplot() +
theme_bw() +
facet_wrap(~Year) +
ggtitle("Boxplot of the realised consumption per week for the years 2016 - 2022")
library(REntsoE)
library(ggplot2)
library(dplyr)
REntsoE::set_apikey("0b6f37a7-d11b-420a-8d44-bcb1136dd5e0")
CZ_all_unit <- REntsoE::pull_data(
documentType = "A75", processType = "A16",
in_Domain="10YCZ-CEPS-----N",
periodStart = "201912312300", periodEnd = "202012312300"
)
View(CZ_all_unit)
library(lubridate)
to_yearly <- function(df, type = c("mean", "median", "sum")){
type <- match.arg(type)
cls_names <- colnames(df)[-1]
df <- df %>%
mutate(year = lubridate::year(Date)) %>%
group_by(year) %>%
summarise_if(is.numeric, lst(mean, median, sum)) %>%
`colnames<-`(c("Year", paste(cls_names, c("mean", "median", "sum"), sep = " "))) %>%
select_if(grepl(paste(type, "$|Year", sep = ""), names(.)))
return(df)
}
# to_yearly(fin, "med")
to_monthly <- function(df, type = c("mean", "median", "sum")){
type <- match.arg(type)
cls_names <- colnames(df)[-1]
df <- df %>%
mutate(year = lubridate::year(Date),
month = lubridate::month(Date)) %>%
group_by(year, month) %>%
summarise_if(is.numeric, lst(mean, median, sum)) %>%
`colnames<-`(c("Year", "Month", paste(cls_names, c("mean", "median", "sum"), sep = " "))) %>%
select_if(grepl(paste(type, "$|Year|Month", sep = ""), names(.))) %>%
mutate(Date = as.Date(paste(Year, "-", Month, "-01", sep = ""))) %>%
ungroup() %>%
select(-c("Year", "Month")) %>%
relocate("Date")
return(df)
}
# to_monthly(fin, "med")
to_weekly <- function(df, type = c("mean", "median", "sum")){
type <- match.arg(type)
cls_names <- colnames(df)[-1]
df <- df %>%
mutate(week = as.Date(as.character(cut(Date, "week")))) %>%
group_by(week) %>%
summarise_if(is.numeric, lst(mean, median, sum)) %>%
`colnames<-`(c("Week", paste(cls_names, c("mean", "median", "sum"), sep = " "))) %>%
select_if(grepl(paste(type, "$|Week", sep = ""), names(.)))
return(df)
}
# to_weekly(fin, "mean")
to_daily <- function(df, type = c("mean", ",median", "sum")){
type <- match.arg(type)
cls_names <- colnames(df)[-1]
df <- df %>%
mutate(Date = format(df$Date, "%Y-%m-%d")) %>%
group_by(Date) %>%
summarise_if(is.numeric, lst(mean, median, sum)) %>%
`colnames<-`(c("Date", paste(cls_names, c("mean", "median", "sum"), sep = " "))) %>%
select_if(grepl(paste(type, "$|Date", sep = ""), names(.)))
return(df)
}
# to_daily(fin, "sum")
to_yearly(CZ_all_unit, "sum")
to_monthly(CZ_all_unit, "sum")
View(CZ_all_unit)
View(CZ_all_unit)
df = CZ_all_unit
type = "sum"
type <- match.arg(type)
cls_names <- colnames(df)[-1]
df %>%
mutate(year = lubridate::year(Date),
month = lubridate::month(Date))
df %>%
mutate(year = lubridate::year(Date),
month = lubridate::month(Date)) %>%
group_by(year, month)
df %>%
mutate(year = lubridate::year(Date),
month = lubridate::month(Date)) %>%
group_by(year, month) %>%
summarise_if(is.numeric, lst(mean, median, sum))
df %>%
mutate(year = lubridate::year(Date),
month = lubridate::month(Date)) %>%
group_by(year, month) %>%
summarise_if(is.numeric, lst(mean, median, sum)) %>%
`colnames<-`(c("Year", "Month", paste(cls_names, c("mean", "median", "sum"), sep = " ")))
df %>%
mutate(year = lubridate::year(Date),
month = lubridate::month(Date)) %>%
group_by(year, month) %>%
summarise_if(is.numeric, lst(mean, median, sum)) %>%
`colnames<-`(c("Year", "Month", paste(cls_names, c("mean", "median", "sum"), sep = " "))) %>%
select_if(grepl(paste(type, "$|Year|Month", sep = ""), names(.)))
cls_names
i <- df %>%
mutate(year = lubridate::year(Date),
month = lubridate::month(Date)) %>%
group_by(year, month) %>%
summarise_if(is.numeric, lst(mean, median, sum)) %>%
`colnames<-`(c("Year", "Month", paste(cls_names, c("mean", "median", "sum"), sep = " ")))
View(i)
paste(cls_names, c("mean", "median", "sum"), sep = " ")
colnames(df)[-1]
paste(c("a", "b", "c"), c("1", "2", "3"))
paste(rep(c("a", "b", "c"), 3), c("1", "2", "3"))
paste(c("a", "b", "c"), rep(c("1", "2", "3"), 3))
as.vector(outer(cls_names, c("mean", "median", "sum"), paste, sep=" "))
to_monthly <- function(df, type = c("mean", "median", "sum")){
type <- match.arg(type)
cls_names <- colnames(df)[-1]
df <- df %>%
mutate(year = lubridate::year(Date),
month = lubridate::month(Date)) %>%
group_by(year, month) %>%
summarise_if(is.numeric, lst(mean, median, sum)) %>%
`colnames<-`(c("Year", "Month",
as.vector(outer(cls_names, c("mean", "median", "sum"), paste, sep=" ")))) %>%
select_if(grepl(paste(type, "$|Year|Month", sep = ""), names(.))) %>%
mutate(Date = as.Date(paste(Year, "-", Month, "-01", sep = ""))) %>%
ungroup() %>%
select(-c("Year", "Month")) %>%
relocate("Date")
return(df)
}
to_monthly(CZ_all_unit, "sum")
to_monthly(CZ_all_unit, "mean")
og_dat <- reshape(CZ_all_unit,
direction = "long",
varying = list(names(CZ_all_unit)[2:ncol(CZ_all_unit)]),
v.names = "Value",
idvar = "Date",
timevar = "Source",
times = names(CZ_all_unit)[2:ncol(CZ_all_unit)])
rownames(og_dat) <- NULL
og_dat$Value <- as.numeric(og_dat$Value)
og_dat$weekday <- factor(weekdays(og_dat$Date), levels = c("Montag",
"Dienstag",
"Mittwoch",
"Donnerstag",
"Freitag",
"Samstag",
"Sonntag"))
og_dat$time <- format(og_dat$Date, format = "%H:%M:%S")
ggplot(data = og_dat, aes(x = Date, y = Value)) +
geom_line() +
facet_wrap(~Source, scales = "free_y")
transformed <- to_monthly(CZ_all_unit, type = "mean")
og_dat <- reshape(CZ_all_unit,
direction = "long",
varying = list(names(CZ_all_unit)[2:ncol(CZ_all_unit)]),
v.names = "Value",
idvar = "Date",
timevar = "Source",
times = names(CZ_all_unit)[2:ncol(CZ_all_unit)])
transformed <- to_monthly(CZ_all_unit, type = "mean")
og_dat <- reshape(transformed,
direction = "long",
varying = list(names(CZ_all_unit)[2:ncol(CZ_all_unit)]),
v.names = "Value",
idvar = "Date",
timevar = "Source",
times = names(CZ_all_unit)[2:ncol(CZ_all_unit)])
og_dat <- reshape(transformed,
direction = "long",
varying = list(names(transformed)[2:ncol(transformed)]),
v.names = "Value",
idvar = "Date",
timevar = "Source",
times = names(transformed)[2:ncol(transformed)])
rownames(og_dat) <- NULL
og_dat$Value <- as.numeric(og_dat$Value)
og_dat$weekday <- factor(weekdays(og_dat$Date), levels = c("Montag",
"Dienstag",
"Mittwoch",
"Donnerstag",
"Freitag",
"Samstag",
"Sonntag"))
og_dat$time <- format(og_dat$Date, format = "%H:%M:%S")
ggplot(data = og_dat, aes(x = Date, y = Value)) +
geom_line() +
facet_wrap(~Source, scales = "free_y")
transformed <- to_monthly(CZ_all_unit, type = "mean")
View(transformed)
og_dat <- reshape(transformed,
direction = "long",
varying = list(names(transformed)[2:ncol(transformed)]),
v.names = "Value",
idvar = "Date",
timevar = "Source",
times = names(transformed)[2:ncol(transformed)])
View(og_dat)
transformed <- to_monthly(CZ_all_unit, type = "mean")
list(names(transformed)[2:ncol(transformed)])
names(transformed)[2:ncol(transformed)]
View(transformed)
View(CZ_all_unit)
reshape(transformed,
direction = "long",
varying = list(names(transformed)[2:ncol(transformed)]),
v.names = "Value",
idvar = "Date",
timevar = "Source",
times = names(transformed)[2:ncol(transformed)])
warnings()
str(CZ_all_unit)
str(transformed)
View(og_dat)
tidyr::pivot_longer(transformed, cols = -c(Date))
og_dat <- tidyr::pivot_longer(transformed, cols = -c(Date))
rownames(og_dat) <- NULL
View(og_dat)
View(og_dat)
str(og_dat)
og_dat$Value <- as.numeric(og_dat$Value)
og_dat$weekday <- factor(weekdays(og_dat$Date), levels = c("Montag",
"Dienstag",
"Mittwoch",
"Donnerstag",
"Freitag",
"Samstag",
"Sonntag"))
og_dat$time <- format(og_dat$Date, format = "%H:%M:%S")
ggplot(data = og_dat, aes(x = Date, y = Value)) +
geom_line() +
facet_wrap(~Source, scales = "free_y")
ggplot(data = og_dat, aes(x = Date, y = value)) +
geom_line() +
facet_wrap(~Source, scales = "free_y")
View(og_dat)
View(og_dat)
ggplot(data = og_dat, aes(x = Date, y = value)) +
geom_line() +
facet_wrap(~name, scales = "free_y")
transformed <- to_daily(CZ_all_unit, type = "mean")
cls_names <- colnames(df)[-1]
df %>%
mutate(Date = format(df$Date, "%Y-%m-%d"))
df %>%
mutate(Date = format(df$Date, "%Y-%m-%d")) %>%
group_by(Date) %>%
summarise_if(is.numeric, lst(mean, median, sum))
to_daily <- function(df, type = c("mean", ",median", "sum")){
type <- match.arg(type)
cls_names <- colnames(df)[-1]
df <- df %>%
mutate(Date = format(df$Date, "%Y-%m-%d")) %>%
group_by(Date) %>%
summarise_if(is.numeric, lst(mean, median, sum)) %>%
`colnames<-`(c("Date", as.vector(outer(cls_names, c("mean", "median", "sum"), paste, sep=" ")))) %>%
select_if(grepl(paste(type, "$|Date", sep = ""), names(.)))
return(df)
}
transformed <- to_daily(CZ_all_unit, type = "mean")
og_dat <- tidyr::pivot_longer(transformed, cols = -c(Date))
rownames(og_dat) <- NULL
og_dat$Value <- as.numeric(og_dat$Value)
og_dat$weekday <- factor(weekdays(og_dat$Date), levels = c("Montag",
"Dienstag",
"Mittwoch",
"Donnerstag",
"Freitag",
"Samstag",
"Sonntag"))
transformed <- to_daily(CZ_all_unit, type = "mean")
og_dat <- tidyr::pivot_longer(transformed, cols = -c(Date))
og_dat$value <- as.numeric(og_dat$value)
weekdays(og_dat$Date)
str(og)
str(og_dat)
df %>%
mutate(week = as.Date(as.character(cut(Date, "week")))) %>%
group_by(week) %>%
summarise_if(is.numeric, lst(mean, median, sum)) %>%
`colnames<-`(c("Week", as.vector(outer(cls_names, c("mean", "median", "sum"), paste, sep=" ")))) %>%
select_if(grepl(paste(type, "$|Week", sep = ""), names(.)))
df %>%
mutate(Date = format(df$Date, "%Y-%m-%d")) %>%
group_by(Date) %>%
summarise_if(is.numeric, lst(mean, median, sum)) %>%
`colnames<-`(c("Date", as.vector(outer(cls_names, c("mean", "median", "sum"), paste, sep=" ")))) %>%
select_if(grepl(paste(type, "$|Date", sep = ""), names(.)))
df %>%
mutate(Date = format(df$Date, "%Y-%m-%d")) %>%
group_by(Date) %>%
summarise_if(is.numeric, lst(mean, median, sum)) %>%
`colnames<-`(c("Date", as.vector(outer(cls_names, c("mean", "median", "sum"), paste, sep=" ")))) %>%
select_if(grepl(paste(type, "$|Date", sep = ""), names(.))) %>%
mutate(Date = as.Date(Date))
to_daily <- function(df, type = c("mean", ",median", "sum")){
type <- match.arg(type)
cls_names <- colnames(df)[-1]
df <- df %>%
mutate(Date = format(df$Date, "%Y-%m-%d")) %>%
group_by(Date) %>%
summarise_if(is.numeric, lst(mean, median, sum)) %>%
`colnames<-`(c("Date", as.vector(outer(cls_names, c("mean", "median", "sum"), paste, sep=" ")))) %>%
select_if(grepl(paste(type, "$|Date", sep = ""), names(.))) %>%
mutate(Date = as.Date(Date))
return(df)
}
transformed <- to_daily(CZ_all_unit, type = "mean")
og_dat <- tidyr::pivot_longer(transformed, cols = -c(Date))
rownames(og_dat) <- NULL
og_dat$value <- as.numeric(og_dat$value)
og_dat$weekday <- factor(weekdays(og_dat$Date), levels = c("Montag",
"Dienstag",
"Mittwoch",
"Donnerstag",
"Freitag",
"Samstag",
"Sonntag"))
og_dat$time <- format(og_dat$Date, format = "%H:%M:%S")
ggplot(data = og_dat, aes(x = Date, y = value)) +
geom_line() +
facet_wrap(~name, scales = "free_y")
library(REntsoE)
library(REntsoE)
